
//Translating traditional Excel file to Sql Server
//Using Programming C#
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.IO;

namespace ReadExcel
{
    class Program
    {
        static void Main(string[] args)
        {
            string myfile = " ";
            //How many Excel file in the folder
            int count = 0;
            //Locate the folder
            string sourceDirectory = @"C:\\Users\\T0191203\\Desktop\\Message";
            //hard code for store the tab name in a array. May be more
            string[] sqltab = { "Capitalization" };
            string[] temparr = Directory.GetFiles(sourceDirectory);
            foreach (string filename in temparr)
            {
                myfile = filename;
                count++;
            }
            for (int i = 0; i < count; i++)
            {
                //Get to each file in array, pass to helper function
                var dataSet = GetDataSetFromExcelFile(temparr[i]);
                //To spilt the string to locate the filename
                string[] tokens = temparr[i].Split('\\');
                //To get the file name
                string newstr = tokens[9];
                for (int numsheet = 0; numsheet < dataSet.Tables.Count; numsheet++)
                {
                    DataTable dt = new DataTable();
                    dt = dataSet.Tables[numsheet];
                    SqlConnection conn = new SqlConnection("Data Source=.\\SQLEXPRESS;Initial Catalog=chester;Integrated Security=True");
                    conn.Open();
                    string temp = dt.ToString();
                    //substring, beacuse the string contains "$" at the end, temp is the table name from dataTable
                    temp = temp.Remove(temp.Length - 1);
                    if (sqltab.Contains(temp))
                    {
                        using (SqlBulkCopy copy = new SqlBulkCopy(conn))
                        {
                            for (int index = 0; index < dataSet.Tables[numsheet].Columns.Count; index++)
                            {
                                copy.ColumnMappings.Add(index, index);
                            }
                            //Tempory string for store the excel name => use method that datable convert to a string
                            copy.DestinationTableName = temp;
                            copy.WriteToServer(dt);
                        }
                    }
                    conn.Close();
                    conn.Dispose();
                }
                //update the filename column
                SqlConnection coe = new SqlConnection("Data Source=.\\SQLEXPRESS;Initial Catalog=chester;Integrated Security=True");
                coe.Open();
                SqlCommand cmmd = new SqlCommand(("Update Capitalization set filename = @filename WHERE filename is null"), coe);
                cmmd.Parameters.AddWithValue("@filename", newstr);
                cmmd.ExecuteNonQuery();
                coe.Close();
                coe.Dispose();
            }
            //add a new colum to store the Date
            SqlConnection con = new SqlConnection("Data Source=.\\SQLEXPRESS;Initial Catalog=chester;Integrated Security=True");
            con.Open();
            SqlCommand cmd = new SqlCommand(("Update Capitalization set date = GETDATE()"), con);
            cmd.ExecuteNonQuery();
            con.Close();
            con.Dispose();
            Console.ReadKey();
        }
        //Helper function to connect C# and Excel
        private static string GetConnectionString(string file)
        {
            Dictionary<string, string> props = new Dictionary<string, string>();
            string extension = file.Split('.').Last();
            //if file type is "xls"
            if (extension == "xls")
            {
                //Excel 2003 and Older
                props["Provider"] = "Microsoft.Jet.OLEDB.4.0";
                props["Extended Properties"] = "Excel 8.0";
            }
            //if file type is xlsx
            else if (extension == "xlsx")
            {
                //Excel 2007, 2010, 2012, 2013
                props["Provider"] = "Microsoft.ACE.OLEDB.12.0;";
                props["Extended Properties"] = "Excel 12.0 XML";
            }
            //if file type is xlsm
            else if (extension == "xlsm")
            {
                props["Provider"] = "Microsoft.ACE.OLEDB.12.0;";
                props["Extended Properties"] = "Excel 12.0 macro";
            }
            else
            {
                throw new Exception(string.Format("error file: {0}", file));
            }
            props["Data Source"] = file;
            StringBuilder sb = new StringBuilder();
            foreach (KeyValuePair<string, string> prop in props)
            {
                sb.Append(prop.Key);
                sb.Append('=');
                sb.Append(prop.Value);
                sb.Append(';');
            }
            //free the dictionary
            props = null;
            //return back the string
            return sb.ToString();
        }
        //helper-function, to open a file, and put all sheets 
        //from excel to C# dataSet
        private static DataSet GetDataSetFromExcelFile(string file)
        {
            DataSet ds = new DataSet();
            string connectionString = GetConnectionString(file);
            using (OleDbConnection conn = new OleDbConnection(connectionString))
            {
                conn.Open();
                OleDbCommand cmd = new OleDbCommand();
                cmd.Connection = conn;
                // Get all Sheets from Excel File
                DataTable dtSheet = conn.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                // Loop through all Sheets to get data
                foreach (DataRow dr in dtSheet.Rows)
                {
                    string sheetName = dr["TABLE_NAME"].ToString();
                    if (!sheetName.EndsWith("$"))
                        continue;
                    // Get all rows from the Sheet
                    cmd.CommandText = "SELECT * FROM [" + sheetName + "]";
                    DataTable dt = new DataTable();
                    dt.TableName = sheetName;
                    OleDbDataAdapter da = new OleDbDataAdapter(cmd);
                    da.Fill(dt);
                    //add new column to store the filename
                    dt.Columns.Add("filename", typeof(string));
                    ds.Tables.Add(dt);
                }
                //Console.WriteLine(ds.Tables[0].Columns.Count);
                cmd = null;
                //Close the connection
                conn.Close();
                //free the menmory
                conn.Dispose();
            }
            //return the DataSet back
            return ds;
        }
    }
}
